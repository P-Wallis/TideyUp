[gd_resource type="ShaderMaterial" load_steps=19 format=2]

[sub_resource type="VisualShaderNodeVectorOp" id=1]

[sub_resource type="VisualShaderNodeVectorCompose" id=2]

[sub_resource type="VisualShaderNodeScalarConstant" id=3]
constant = 0.1

[sub_resource type="VisualShaderNodeScalarConstant" id=4]
constant = 0.1

[sub_resource type="VisualShaderNodeScalarOp" id=5]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=6]
operator = 1

[sub_resource type="VisualShaderNodeTexture" id=7]
source = 5
texture_type = 1

[sub_resource type="VisualShaderNodeScalarOp" id=8]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "texture"

[sub_resource type="VisualShaderNodeVectorOp" id=10]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=11]

[sub_resource type="VisualShaderNodeVectorOp" id=12]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=13]
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 1

[sub_resource type="VisualShaderNodeColorConstant" id=14]
constant = Color( 0.97703, 1, 0, 1 )

[sub_resource type="VisualShaderNodeTexture" id=15]
source = 5
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id=16]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=17]
source = 5
texture_type = 1

[sub_resource type="VisualShader" id=18]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:2

// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 TEXTURE_tex_read = texture(TEXTURE, UV.xy);
		n_out3p0 = TEXTURE_tex_read.rgb;
		n_out3p1 = TEXTURE_tex_read.a;
	}

// Input:5
	vec3 n_out5p0 = vec3(UV, 0.0);

// Scalar:12
	float n_out12p0 = 0.100000;

// Scalar:14
	float n_out14p0 = 0.100000;

// ScalarOp:15
	float n_out15p0 = n_out12p0 * n_out14p0;

// VectorCompose:11
	float n_in11p2 = 0.00000;
	vec3 n_out11p0 = vec3(n_out12p0, n_out15p0, n_in11p2);

// VectorOp:10
	vec3 n_out10p0 = n_out5p0 + n_out11p0;

// Texture:6
	vec3 n_out6p0;
	float n_out6p1;
	{
		vec4 TEXTURE_tex_read = texture(TEXTURE, n_out10p0.xy);
		n_out6p0 = TEXTURE_tex_read.rgb;
		n_out6p1 = TEXTURE_tex_read.a;
	}

// VectorOp:17
	vec3 n_out17p0 = n_out5p0 - n_out11p0;

// Texture:18
	vec3 n_out18p0;
	float n_out18p1;
	{
		vec4 TEXTURE_tex_read = texture(TEXTURE, n_out17p0.xy);
		n_out18p0 = TEXTURE_tex_read.rgb;
		n_out18p1 = TEXTURE_tex_read.a;
	}

// ScalarOp:19
	float n_out19p0 = n_out6p1 * n_out18p1;

// VectorOp:20
	vec3 n_out20p0 = n_out3p0 * vec3(n_out19p0);

// Color:24
	vec3 n_out24p0 = vec3(0.977030, 1.000000, 0.000000);
	float n_out24p1 = 1.000000;

// ScalarOp:23
	float n_in23p0 = 1.00000;
	float n_out23p0 = n_in23p0 - n_out19p0;

// VectorOp:22
	vec3 n_out22p0 = n_out24p0 * vec3(n_out23p0);

// VectorOp:21
	vec3 n_out21p0 = n_out20p0 + n_out22p0;

// Output:0
	COLOR.rgb = n_out21p0;
	COLOR.a = n_out3p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -471.328, -47.8648 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1440, 140 )
nodes/fragment/2/node = SubResource( 9 )
nodes/fragment/2/position = Vector2( -960, 200 )
nodes/fragment/3/node = SubResource( 15 )
nodes/fragment/3/position = Vector2( -520, 40 )
nodes/fragment/5/node = SubResource( 16 )
nodes/fragment/5/position = Vector2( -1660, 380 )
nodes/fragment/6/node = SubResource( 17 )
nodes/fragment/6/position = Vector2( -480, 340 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -1200, 400 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -1680, 520 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -2840, 740 )
nodes/fragment/14/node = SubResource( 4 )
nodes/fragment/14/position = Vector2( -2040, 740 )
nodes/fragment/15/node = SubResource( 5 )
nodes/fragment/15/position = Vector2( -2020, 540 )
nodes/fragment/17/node = SubResource( 6 )
nodes/fragment/17/position = Vector2( -1180, 620 )
nodes/fragment/18/node = SubResource( 7 )
nodes/fragment/18/position = Vector2( -520, 620 )
nodes/fragment/19/node = SubResource( 8 )
nodes/fragment/19/position = Vector2( 40, 540 )
nodes/fragment/20/node = SubResource( 10 )
nodes/fragment/20/position = Vector2( 520, 480 )
nodes/fragment/21/node = SubResource( 11 )
nodes/fragment/21/position = Vector2( 880, 480 )
nodes/fragment/22/node = SubResource( 12 )
nodes/fragment/22/position = Vector2( 600, 880 )
nodes/fragment/23/node = SubResource( 13 )
nodes/fragment/23/position = Vector2( 160, 820 )
nodes/fragment/24/node = SubResource( 14 )
nodes/fragment/24/position = Vector2( -2800, 980 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 2, 3, 1, 0, 1, 2, 0, 6, 2, 5, 0, 10, 0, 11, 0, 10, 1, 12, 0, 11, 0, 12, 0, 15, 0, 14, 0, 15, 1, 15, 0, 11, 1, 11, 0, 17, 1, 5, 0, 17, 0, 17, 0, 18, 0, 10, 0, 6, 0, 2, 0, 18, 2, 6, 1, 19, 0, 18, 1, 19, 1, 19, 0, 20, 1, 3, 0, 20, 0, 20, 0, 21, 0, 21, 0, 0, 0, 19, 0, 23, 1, 23, 0, 22, 1, 22, 0, 21, 1, 24, 0, 22, 0 )

[resource]
shader = SubResource( 18 )
