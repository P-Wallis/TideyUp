[gd_resource type="ShaderMaterial" load_steps=14 format=2]

[sub_resource type="VisualShaderNodeVectorOp" id=7]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.95, 0.95, 0.95 ) ]
operator = 4

[sub_resource type="VisualShaderNodeVectorCompose" id=9]

[sub_resource type="VisualShaderNodeScalarConstant" id=10]
constant = 0.95

[sub_resource type="VisualShaderNodeVectorCompose" id=11]
default_input_values = [ 0, 0.0, 1, 1.0, 2, 0.0 ]

[sub_resource type="VisualShaderNodeVectorOp" id=12]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "texture"

[sub_resource type="VisualShaderNodeScalarConstant" id=13]
constant = 320.0

[sub_resource type="VisualShaderNodeInput" id=14]
input_name = "texture_pixel_size"

[sub_resource type="VisualShaderNodeScalarOp" id=15]
operator = 2

[sub_resource type="VisualShaderNodeVectorDecompose" id=16]

[sub_resource type="VisualShaderNodeTexture" id=2]
source = 5

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "uv"

[sub_resource type="VisualShader" id=4]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// Scalar:21
	float n_out21p0 = 320.000000;

// Input:22
	vec3 n_out22p0 = vec3(TEXTURE_PIXEL_SIZE, 1.0);

// VectorDecompose:24
	float n_out24p0 = n_out22p0.x;
	float n_out24p1 = n_out22p0.y;
	float n_out24p2 = n_out22p0.z;

// ScalarOp:23
	float n_out23p0 = n_out21p0 * n_out24p0;

// VectorCompose:16
	float n_in16p1 = 1.00000;
	float n_in16p2 = 0.00000;
	vec3 n_out16p0 = vec3(n_out23p0, n_in16p1, n_in16p2);

// VectorOp:19
	vec3 n_out19p0 = n_out4p0 * n_out16p0;

// Scalar:15
	float n_out15p0 = 0.950000;

// VectorCompose:14
	vec3 n_out14p0 = vec3(n_out15p0, n_out15p0, n_out15p0);

// VectorOp:12
	vec3 n_out12p0 = mod(n_out19p0, n_out14p0);

// Input:2

// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 TEXTURE_tex_read = texture(TEXTURE, n_out12p0.xy);
		n_out3p0 = TEXTURE_tex_read.rgb;
		n_out3p1 = TEXTURE_tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out3p0;
	COLOR.a = n_out3p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -665.982, -19.7334 )
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -640, 420 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -180, 180 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -1660, 100 )
nodes/fragment/12/node = SubResource( 7 )
nodes/fragment/12/position = Vector2( -760, 80 )
nodes/fragment/14/node = SubResource( 9 )
nodes/fragment/14/position = Vector2( -1060, 460 )
nodes/fragment/15/node = SubResource( 10 )
nodes/fragment/15/position = Vector2( -1460, 540 )
nodes/fragment/16/node = SubResource( 11 )
nodes/fragment/16/position = Vector2( -1940, 340 )
nodes/fragment/19/node = SubResource( 12 )
nodes/fragment/19/position = Vector2( -1180, 40 )
nodes/fragment/21/node = SubResource( 13 )
nodes/fragment/21/position = Vector2( -2980, 340 )
nodes/fragment/22/node = SubResource( 14 )
nodes/fragment/22/position = Vector2( -3440, 540 )
nodes/fragment/23/node = SubResource( 15 )
nodes/fragment/23/position = Vector2( -2380, 360 )
nodes/fragment/24/node = SubResource( 16 )
nodes/fragment/24/position = Vector2( -2900, 580 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 2, 3, 1, 0, 1, 12, 0, 3, 0, 15, 0, 14, 0, 15, 0, 14, 1, 15, 0, 14, 2, 14, 0, 12, 1, 19, 0, 12, 0, 3, 0, 0, 0, 4, 0, 19, 0, 16, 0, 19, 1, 21, 0, 23, 0, 23, 0, 16, 0, 22, 0, 24, 0, 24, 0, 23, 1 )

[resource]
shader = SubResource( 4 )
