[gd_resource type="ShaderMaterial" load_steps=21 format=2]

[ext_resource path="res://Sprites/Level.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=12]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=13]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=14]
function = 0

[sub_resource type="VisualShaderNodeVectorDecompose" id=15]

[sub_resource type="VisualShaderNodeVectorCompose" id=16]

[sub_resource type="VisualShaderNodeScalarOp" id=17]

[sub_resource type="VisualShaderNodeScalarOp" id=18]

[sub_resource type="VisualShaderNodeScalarOp" id=19]
default_input_values = [ 0, 0.0, 1, 0.01 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=20]
default_input_values = [ 0, 0.0, 1, 30.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=21]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=22]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 1

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeTexture" id=9]
source = 5

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeTexture" id=11]
texture = ExtResource( 1 )
texture_type = 1

[sub_resource type="VisualShaderNodeColorOp" id=5]

[sub_resource type="VisualShaderNodeTexture" id=6]
texture = ExtResource( 1 )

[sub_resource type="VisualShader" id=2]
code = "shader_type canvas_item;
uniform sampler2D tex_vtx_4;
uniform sampler2D tex_frg_9 : hint_albedo;



void vertex() {
// Texture:4
	vec4 tex_vtx_4_read = texture(tex_vtx_4, UV.xy);
	vec3 n_out4p0 = tex_vtx_4_read.rgb;
	float n_out4p1 = tex_vtx_4_read.a;

// ColorOp:3
	vec3 n_in3p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out3p0 = vec3(1.0) - (vec3(1.0) - n_out4p0) * (vec3(1.0) - n_in3p1);

// Output:0
	COLOR.rgb = n_out3p0;

}

void fragment() {
// Input:7
	vec3 n_out7p0 = vec3(SCREEN_UV, 0.0);

// Input:4

// Texture:6
	vec3 n_out6p0;
	float n_out6p1;
	{
		vec4 SCREEN_TEXTURE_tex_read = texture(SCREEN_TEXTURE, n_out7p0.xy);
		n_out6p0 = SCREEN_TEXTURE_tex_read.rgb;
		n_out6p1 = SCREEN_TEXTURE_tex_read.a;
	}

// Input:10
	vec3 n_out10p0 = vec3(UV, 0.0);

// VectorDecompose:14
	float n_out14p0 = n_out10p0.x;
	float n_out14p1 = n_out10p0.y;
	float n_out14p2 = n_out10p0.z;

// Input:12
	float n_out12p0 = TIME;

// ScalarOp:20
	float n_in20p1 = 1.00000;
	float n_out20p0 = n_out12p0 * n_in20p1;

// ScalarOp:19
	float n_in19p1 = 30.00000;
	float n_out19p0 = n_out14p0 * n_in19p1;

// ScalarOp:16
	float n_out16p0 = n_out20p0 + n_out19p0;

// ScalarFunc:13
	float n_out13p0 = sin(n_out16p0);

// ScalarOp:21
	float n_in21p1 = 1.00000;
	float n_out21p0 = n_out13p0 - n_in21p1;

// ScalarOp:18
	float n_in18p1 = 0.01000;
	float n_out18p0 = n_out21p0 * n_in18p1;

// ScalarOp:17
	float n_out17p0 = n_out18p0 + n_out14p1;

// VectorCompose:15
	float n_in15p2 = 0.00000;
	vec3 n_out15p0 = vec3(n_out14p0, n_out17p0, n_in15p2);

// Texture:9
	vec4 tex_frg_9_read = texture(tex_frg_9, n_out15p0.xy);
	vec3 n_out9p0 = tex_frg_9_read.rgb;
	float n_out9p1 = tex_frg_9_read.a;

// VectorOp:11
	vec3 n_out11p0 = n_out6p0 * n_out9p0;

// Output:0
	COLOR.rgb = n_out11p0;
	COLOR.a = n_out9p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -647.704, -70.7241 )
mode = 1
flags/light_only = false
nodes/vertex/3/node = SubResource( 5 )
nodes/vertex/3/position = Vector2( 60, 220 )
nodes/vertex/4/node = SubResource( 6 )
nodes/vertex/4/position = Vector2( -260, 60 )
nodes/vertex/connections = PoolIntArray( 3, 0, 0, 2, 4, 0, 3, 0 )
nodes/fragment/0/position = Vector2( 440, 320 )
nodes/fragment/4/node = SubResource( 8 )
nodes/fragment/4/position = Vector2( -1160, 240 )
nodes/fragment/6/node = SubResource( 9 )
nodes/fragment/6/position = Vector2( -680, 60 )
nodes/fragment/7/node = SubResource( 10 )
nodes/fragment/7/position = Vector2( -1140, 100 )
nodes/fragment/9/node = SubResource( 11 )
nodes/fragment/9/position = Vector2( -700, 340 )
nodes/fragment/10/node = SubResource( 7 )
nodes/fragment/10/position = Vector2( -4620, 660 )
nodes/fragment/11/node = SubResource( 12 )
nodes/fragment/11/position = Vector2( -260, 140 )
nodes/fragment/12/node = SubResource( 13 )
nodes/fragment/12/position = Vector2( -3880, 180 )
nodes/fragment/13/node = SubResource( 14 )
nodes/fragment/13/position = Vector2( -2680, 280 )
nodes/fragment/14/node = SubResource( 15 )
nodes/fragment/14/position = Vector2( -4260, 660 )
nodes/fragment/15/node = SubResource( 16 )
nodes/fragment/15/position = Vector2( -1380, 640 )
nodes/fragment/16/node = SubResource( 17 )
nodes/fragment/16/position = Vector2( -3020, 240 )
nodes/fragment/17/node = SubResource( 18 )
nodes/fragment/17/position = Vector2( -1760, 640 )
nodes/fragment/18/node = SubResource( 19 )
nodes/fragment/18/position = Vector2( -1840, 260 )
nodes/fragment/19/node = SubResource( 20 )
nodes/fragment/19/position = Vector2( -3620, 480 )
nodes/fragment/20/node = SubResource( 21 )
nodes/fragment/20/position = Vector2( -3500, 160 )
nodes/fragment/21/node = SubResource( 22 )
nodes/fragment/21/position = Vector2( -2240, 280 )
nodes/fragment/connections = PoolIntArray( 4, 0, 6, 2, 7, 0, 6, 0, 9, 1, 0, 1, 6, 0, 11, 0, 9, 0, 11, 1, 11, 0, 0, 0, 10, 0, 14, 0, 15, 0, 9, 0, 14, 0, 15, 0, 16, 0, 13, 0, 17, 0, 15, 1, 14, 0, 19, 0, 19, 0, 16, 1, 12, 0, 20, 0, 20, 0, 16, 0, 14, 1, 17, 1, 18, 0, 17, 0, 13, 0, 21, 0, 21, 0, 18, 0 )

[resource]
shader = SubResource( 2 )
